(()=>{"use strict";class e{constructor(e){this.overlay=null,this.handleOutsideClick=e=>{this.overlay&&!this.overlay.contains(e.target)&&this.remove()},this.container=e}show(e,t){this.remove(),this.overlay=document.createElement("div"),this.overlay.className="reply-guy-overlay",this.overlay.innerHTML=`\n      <style>\n        .reply-guy-overlay {\n          position: absolute;\n          z-index: 10000;\n          background: white;\n          border-radius: 12px;\n          box-shadow: 0 4px 24px rgba(0, 0, 0, 0.15);\n          padding: 16px;\n          max-width: 500px;\n          margin-top: 8px;\n          animation: slideIn 0.2s ease-out;\n        }\n\n        @keyframes slideIn {\n          from {\n            opacity: 0;\n            transform: translateY(-10px);\n          }\n          to {\n            opacity: 1;\n            transform: translateY(0);\n          }\n        }\n\n        .reply-guy-header {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          margin-bottom: 12px;\n          padding-bottom: 12px;\n          border-bottom: 1px solid #e9ecef;\n        }\n\n        .reply-guy-title {\n          display: flex;\n          align-items: center;\n          font-size: 16px;\n          font-weight: 600;\n          color: #1a1a1a;\n        }\n\n        .reply-guy-logo {\n          width: 20px;\n          height: 20px;\n          margin-right: 8px;\n          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n          border-radius: 4px;\n        }\n\n        .reply-guy-close {\n          width: 24px;\n          height: 24px;\n          border: none;\n          background: none;\n          cursor: pointer;\n          color: #6c757d;\n          font-size: 20px;\n          line-height: 1;\n          transition: color 0.2s;\n        }\n\n        .reply-guy-close:hover {\n          color: #1a1a1a;\n        }\n\n        .reply-guy-suggestions {\n          display: flex;\n          flex-direction: column;\n          gap: 8px;\n        }\n\n        .reply-guy-suggestion {\n          padding: 12px;\n          background: #f8f9fa;\n          border: 1px solid #e9ecef;\n          border-radius: 8px;\n          cursor: pointer;\n          transition: all 0.2s;\n          font-size: 14px;\n          line-height: 1.5;\n          color: #1a1a1a;\n        }\n\n        .reply-guy-suggestion:hover {\n          background: #e9ecef;\n          border-color: #667eea;\n          transform: translateX(4px);\n        }\n\n        .reply-guy-loading {\n          text-align: center;\n          padding: 40px;\n          color: #6c757d;\n        }\n\n        .reply-guy-spinner {\n          width: 32px;\n          height: 32px;\n          border: 3px solid #f3f3f3;\n          border-top: 3px solid #667eea;\n          border-radius: 50%;\n          animation: spin 1s linear infinite;\n          margin: 0 auto 12px;\n        }\n\n        @keyframes spin {\n          0% { transform: rotate(0deg); }\n          100% { transform: rotate(360deg); }\n        }\n      </style>\n      <div class="reply-guy-header">\n        <div class="reply-guy-title">\n          <div class="reply-guy-logo"></div>\n          Reply Suggestions\n        </div>\n        <button class="reply-guy-close" aria-label="Close">×</button>\n      </div>\n      <div class="reply-guy-suggestions">\n        ${e.map((e,t)=>`\n          <div class="reply-guy-suggestion" data-index="${t}">\n            ${this.escapeHtml(e)}\n          </div>\n        `).join("")}\n      </div>\n    `;const n=this.container.getBoundingClientRect();this.overlay.style.position="fixed",this.overlay.style.top=`${n.bottom+window.scrollY}px`,this.overlay.style.left=`${n.left}px`,this.overlay.style.width=`${n.width}px`,this.overlay.querySelector(".reply-guy-close")?.addEventListener("click",()=>this.remove()),this.overlay.querySelectorAll(".reply-guy-suggestion").forEach(n=>{n.addEventListener("click",()=>{const s=parseInt(n.getAttribute("data-index")||"0");t(e[s]),this.remove()})}),setTimeout(()=>{document.addEventListener("click",this.handleOutsideClick)},0),document.body.appendChild(this.overlay)}showLoading(){this.remove(),this.overlay=document.createElement("div"),this.overlay.className="reply-guy-overlay",this.overlay.innerHTML=`\n      <style>\n        ${this.getStyles()}\n      </style>\n      <div class="reply-guy-loading">\n        <div class="reply-guy-spinner"></div>\n        <div>Generating suggestions...</div>\n      </div>\n    `;const e=this.container.getBoundingClientRect();this.overlay.style.position="fixed",this.overlay.style.top=`${e.bottom+window.scrollY}px`,this.overlay.style.left=`${e.left}px`,document.body.appendChild(this.overlay)}showError(e){this.remove(),this.overlay=document.createElement("div"),this.overlay.className="reply-guy-overlay",this.overlay.innerHTML=`\n      <style>\n        ${this.getStyles()}\n        .reply-guy-error {\n          padding: 20px;\n          text-align: center;\n          color: #dc3545;\n        }\n      </style>\n      <div class="reply-guy-header">\n        <div class="reply-guy-title">\n          <div class="reply-guy-logo"></div>\n          Reply Guy\n        </div>\n        <button class="reply-guy-close" aria-label="Close">×</button>\n      </div>\n      <div class="reply-guy-error">\n        ${this.escapeHtml(e)}\n      </div>\n    `;const t=this.container.getBoundingClientRect();this.overlay.style.position="fixed",this.overlay.style.top=`${t.bottom+window.scrollY}px`,this.overlay.style.left=`${t.left}px`,this.overlay.querySelector(".reply-guy-close")?.addEventListener("click",()=>this.remove()),document.body.appendChild(this.overlay)}remove(){this.overlay&&(this.overlay.remove(),this.overlay=null,document.removeEventListener("click",this.handleOutsideClick))}escapeHtml(e){const t=document.createElement("div");return t.textContent=e,t.innerHTML}getStyles(){return"\n      .reply-guy-overlay {\n        position: absolute;\n        z-index: 10000;\n        background: white;\n        border-radius: 12px;\n        box-shadow: 0 4px 24px rgba(0, 0, 0, 0.15);\n        padding: 16px;\n        max-width: 500px;\n        margin-top: 8px;\n        animation: slideIn 0.2s ease-out;\n      }\n      /* ... rest of styles from show() method ... */\n    "}}class t{constructor(){this.observer=null,this.injectedButtons=new WeakMap,this.overlays=new WeakMap}initialize(){console.log("Reply Guy: Initializing Twitter integration"),this.setupObserver(),this.injectButtons()}cleanup(){this.observer&&(this.observer.disconnect(),this.observer=null),this.injectedButtons=new WeakMap}handleUrlChange(){setTimeout(()=>this.injectButtons(),500)}setupObserver(){this.observer=new MutationObserver(e=>{for(const t of e)"childList"===t.type&&this.injectButtons()}),this.observer.observe(document.body,{childList:!0,subtree:!0})}injectButtons(){this.findComposeAreas().forEach(e=>{if(!this.injectedButtons.has(e)){const t=this.createReplyGuyButton(e);t&&this.injectedButtons.set(e,t)}})}findComposeAreas(){const e=[];return['[data-testid="tweetTextarea_0"]','[data-testid="tweetTextarea_1"]','[role="textbox"][aria-label*="Tweet"]','[role="textbox"][aria-label*="Post"]','[role="textbox"][aria-label*="Reply"]',".DraftEditor-editorContainer"].forEach(t=>{document.querySelectorAll(t).forEach(t=>{const n=t.closest('[data-testid="tweetButton"]')?.parentElement?.parentElement||t.closest(".css-1dbjc4n.r-1iusvr4.r-16y2uox");n&&!e.includes(n)&&e.push(n)})}),e}createReplyGuyButton(e){const t=e.querySelector('[data-testid="toolBar"]')||e.querySelector(".css-1dbjc4n.r-1iusvr4.r-16y2uox.r-1wbh5a2");if(!t)return null;const n=document.createElement("div");return n.className="reply-guy-button",n.innerHTML='\n      <div style="\n        display: flex;\n        align-items: center;\n        padding: 8px 12px;\n        margin-left: 8px;\n        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n        color: white;\n        border-radius: 9999px;\n        cursor: pointer;\n        font-size: 14px;\n        font-weight: 500;\n        transition: all 0.2s;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n      " \n      onmouseover="this.style.transform=\'scale(1.05)\'" \n      onmouseout="this.style.transform=\'scale(1)\'">\n        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="margin-right: 6px;">\n          <path d="M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z"/>\n        </svg>\n        Reply Guy\n      </div>\n    ',n.addEventListener("click",()=>this.handleButtonClick(e)),t.appendChild(n),n}async handleButtonClick(t){let n=this.overlays.get(t);n||(n=new e(t),this.overlays.set(t,n)),n.showLoading();const s=this.getTweetText(t),i=this.getOriginalTweet(t);try{const e=await chrome.runtime.sendMessage({action:"getSuggestions",data:{tweet:i||s}});e.success?n.show(e.data.suggestions,e=>{this.insertSuggestion(t,e)}):n.showError(e.error||"Failed to get suggestions")}catch(e){n.showError("Failed to connect to Reply Guy. Please make sure you are logged in.")}}getTweetText(e){const t=e.querySelector('[role="textbox"]');return t?.textContent||""}getOriginalTweet(e){const t=e.closest("article");if(t){const e=t.previousElementSibling?.querySelector("article");if(e){const t=e.querySelector('[data-testid="tweetText"]');return t?.textContent||""}}return""}insertSuggestion(e,t){const n=e.querySelector('[role="textbox"]');if(n){n.innerText=t;const e=new Event("input",{bubbles:!0});n.dispatchEvent(e),n.focus()}}}let n=null,s={isAuthenticated:!1};chrome.runtime.onMessage.addListener((e,i,o)=>{"authStateChanged"===e.action&&(s=e.data,s.isAuthenticated&&!n?(n=new t,n.initialize()):!s.isAuthenticated&&n&&(n.cleanup(),n=null))});let i=location.href;new MutationObserver(()=>{const e=location.href;e!==i&&(i=e,n&&n.handleUrlChange())}).observe(document,{subtree:!0,childList:!0}),async function(){const e=await chrome.runtime.sendMessage({action:"checkAuth"});e.success&&(s=e.data),s.isAuthenticated&&(n=new t,n.initialize())}()})();