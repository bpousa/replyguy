(()=>{"use strict";class e{constructor(e){this.overlay=null,this.responseType="neutral",this.tone="friendly",this.responseIdea="",this.replyLength="short",this.needsResearch=!1,this.perplexityGuidance="",this.includeMeme=!1,this.memeText="",this.memeTextMode="tweet",this.tweet="",this.userPlan=null,this.handleOutsideClick=e=>{this.overlay&&!this.overlay.contains(e.target)&&this.remove()},this.container=e}async showOptions(e,n){this.remove(),this.tweet=e;try{const e=await chrome.runtime.sendMessage({action:"getUsageLimits"});e.success&&(this.userPlan=e.data)}catch(e){console.error("[ReplyGuy] Failed to get user plan:",e)}this.overlay=document.createElement("div"),this.overlay.className="reply-guy-overlay",this.overlay.innerHTML=`\n      <style>\n        ${this.getComprehensiveStyles()}\n      </style>\n      <div class="reply-guy-header">\n        <div class="reply-guy-title">\n          <svg viewBox="0 0 24 24" class="reply-guy-logo-icon">\n            <rect width="24" height="24" rx="4" fill="url(#rg-gradient)"/>\n            <defs>\n              <linearGradient id="rg-gradient" x1="0%" y1="0%" x2="100%" y2="100%">\n                <stop offset="0%" style="stop-color:#667eea" />\n                <stop offset="100%" style="stop-color:#764ba2" />\n              </linearGradient>\n            </defs>\n            <text x="50%" y="50%" text-anchor="middle" dominant-baseline="middle" \n                  font-family="Arial, sans-serif" font-size="11" font-weight="bold" fill="white">RG</text>\n          </svg>\n          <span>Reply Guy</span>\n        </div>\n        <button class="reply-guy-close" aria-label="Close">×</button>\n      </div>\n      \n      <div class="reply-guy-content">\n        \x3c!-- Tweet Preview --\x3e\n        <details class="reply-guy-tweet-section" open>\n          <summary>Replying to...</summary>\n          <div class="reply-guy-tweet-preview">\n            ${this.escapeHtml(e.substring(0,200))}${e.length>200?"...":""}\n          </div>\n        </details>\n        \n        \x3c!-- Main Options --\x3e\n        <div class="reply-guy-main-section">\n          \x3c!-- Response Type --\x3e\n          <div class="reply-guy-option-group">\n            <label class="reply-guy-option-label">Response Type</label>\n            <div class="reply-guy-response-types">\n              <button class="reply-guy-response-type" data-type="agree">\n                <span class="type-emoji">👍</span>\n                <span>Agree</span>\n              </button>\n              <button class="reply-guy-response-type" data-type="disagree">\n                <span class="type-emoji">🤔</span>\n                <span>Disagree</span>\n              </button>\n              <button class="reply-guy-response-type active" data-type="neutral">\n                <span class="type-emoji">💭</span>\n                <span>Neutral</span>\n              </button>\n              <button class="reply-guy-response-type" data-type="other">\n                <span class="type-emoji">✨</span>\n                <span>Other</span>\n              </button>\n            </div>\n          </div>\n          \n          \x3c!-- Tone --\x3e\n          <div class="reply-guy-option-group">\n            <label class="reply-guy-option-label">Tone</label>\n            <select class="reply-guy-tone-select" id="reply-guy-tone">\n              <option value="friendly">😊 Friendly</option>\n              <option value="professional">💼 Professional</option>\n              <option value="casual">👋 Casual</option>\n              <option value="humorous">😄 Humorous</option>\n              <option value="empathetic">❤️ Empathetic</option>\n              <option value="witty">🎯 Witty</option>\n              <option value="sarcastic">😏 Sarcastic</option>\n              <option value="supportive">🤝 Supportive</option>\n              <option value="informative">📚 Informative</option>\n              <option value="formal">🎩 Formal</option>\n            </select>\n          </div>\n          \n          \x3c!-- Response Idea --\x3e\n          <div class="reply-guy-option-group">\n            <div class="reply-guy-label-with-action">\n              <label class="reply-guy-option-label" for="reply-guy-idea">What do you want to say?</label>\n              <button class="reply-guy-suggest-btn" id="reply-guy-suggest">\n                <svg width="14" height="14" viewBox="0 0 24 24" fill="none">\n                  <path d="M12 2L13.09 8.26L19 7L15.45 11.82L21 16L14.5 16.5L15 23L10.18 17.45L5 21L5.5 14.5L0 16L5.55 11.18L2 7L7.91 8.26L9 2L12 2Z" fill="currentColor"/>\n                </svg>\n                Suggest\n              </button>\n            </div>\n            <textarea \n              id="reply-guy-idea" \n              class="reply-guy-idea-input" \n              placeholder="Describe your response (e.g., 'Sympathize and share a similar experience')"\n              rows="3"\n            >${this.responseIdea}</textarea>\n            <div class="reply-guy-char-count">\n              <span id="idea-char-count">0</span> / <span id="idea-char-limit">200</span>\n            </div>\n          </div>\n        </div>\n        \n        \x3c!-- Advanced Options --\x3e\n        <details class="reply-guy-advanced-section">\n          <summary>Advanced Options</summary>\n          <div class="reply-guy-advanced-content">\n            \x3c!-- Reply Length --\x3e\n            <div class="reply-guy-option-group">\n              <label class="reply-guy-option-label">Reply Length</label>\n              <div class="reply-guy-length-options">\n                <label class="reply-guy-radio">\n                  <input type="radio" name="replyLength" value="short" checked>\n                  <span>Short (280)</span>\n                </label>\n                <label class="reply-guy-radio">\n                  <input type="radio" name="replyLength" value="medium" ${this.userPlan?.enable_long_replies?"":"disabled"}>\n                  <span>Medium (560) ${this.userPlan?.enable_long_replies?"":"🔒"}</span>\n                </label>\n                <label class="reply-guy-radio">\n                  <input type="radio" name="replyLength" value="long" ${this.userPlan?.enable_long_replies?"":"disabled"}>\n                  <span>Long (1000) ${this.userPlan?.enable_long_replies?"":"🔒"}</span>\n                </label>\n              </div>\n            </div>\n            \n            \x3c!-- Perplexity Research --\x3e\n            ${!1!==this.userPlan?.enable_perplexity_guidance?'\n            <div class="reply-guy-option-group">\n              <label class="reply-guy-checkbox">\n                <input type="checkbox" id="reply-guy-research">\n                <span>Use real-time research 🔍</span>\n              </label>\n              <input \n                type="text" \n                id="reply-guy-perplexity" \n                class="reply-guy-text-input" \n                placeholder="What should we research?"\n                style="display: none; margin-top: 8px;"\n              >\n            </div>\n            ':""}\n          </div>\n        </details>\n        \n        \x3c!-- Fun Extras --\x3e\n        ${!1!==this.userPlan?.enable_memes?'\n        <details class="reply-guy-extras-section">\n          <summary>Fun Extras</summary>\n          <div class="reply-guy-extras-content">\n            <div class="reply-guy-option-group">\n              <label class="reply-guy-checkbox">\n                <input type="checkbox" id="reply-guy-meme">\n                <span>Add a meme 🎭</span>\n              </label>\n              <div id="reply-guy-meme-options" style="display: none; margin-top: 12px;">\n                <div class="reply-guy-meme-mode">\n                  <label class="reply-guy-radio">\n                    <input type="radio" name="memeMode" value="tweet" checked>\n                    <span>From tweet</span>\n                  </label>\n                  <label class="reply-guy-radio">\n                    <input type="radio" name="memeMode" value="reply">\n                    <span>From reply</span>\n                  </label>\n                  <label class="reply-guy-radio">\n                    <input type="radio" name="memeMode" value="custom">\n                    <span>Custom</span>\n                  </label>\n                </div>\n                <textarea \n                  id="reply-guy-meme-text" \n                  class="reply-guy-text-input" \n                  placeholder="Enter meme text..."\n                  rows="2"\n                  style="display: none; margin-top: 8px;"\n                ></textarea>\n              </div>\n            </div>\n          </div>\n        </details>\n        ':""}\n        \n        \x3c!-- Action Buttons --\x3e\n        <div class="reply-guy-actions">\n          <button class="reply-guy-generate-btn" id="reply-guy-generate">\n            Generate Reply\n          </button>\n          ${this.userPlan?`\n          <div class="reply-guy-usage">\n            <span>${this.userPlan.repliesRemaining||0}</span> / <span>${this.userPlan.repliesTotal||0}</span> replies left\n          </div>\n          `:""}\n        </div>\n      </div>\n    `;const t=this.container.getBoundingClientRect();this.overlay.style.position="fixed",this.overlay.style.top=`${Math.min(t.bottom+8,window.innerHeight-600)}px`,this.overlay.style.left=`${Math.min(t.left,window.innerWidth-500)}px`,this.overlay.style.width="480px",this.overlay.style.maxHeight="600px",this.overlay.style.overflowY="auto",this.attachEventListeners(n),setTimeout(()=>{document.addEventListener("click",this.handleOutsideClick)},0),document.body.appendChild(this.overlay)}attachEventListeners(e){if(!this.overlay)return;this.overlay.querySelector(".reply-guy-close")?.addEventListener("click",()=>this.remove()),this.overlay.querySelectorAll(".reply-guy-response-type").forEach(e=>{e.addEventListener("click",()=>{this.overlay?.querySelectorAll(".reply-guy-response-type").forEach(e=>e.classList.remove("active")),e.classList.add("active"),this.responseType=e.getAttribute("data-type")||"neutral"})});const n=this.overlay.querySelector("#reply-guy-tone");n?.addEventListener("change",()=>{this.tone=n.value});const t=this.overlay.querySelector("#reply-guy-idea"),o=this.overlay.querySelector("#idea-char-count");if(this.overlay.querySelector("#idea-char-limit"),t&&o){const e=()=>{const e=t.value.length;o.textContent=e.toString(),t.classList.toggle("error",e>200)};t.addEventListener("input",()=>{this.responseIdea=t.value,e()}),e()}this.overlay.querySelector("#reply-guy-suggest")?.addEventListener("click",async()=>{console.log("[ReplyGuy] Suggest button clicked")}),this.overlay.querySelectorAll('input[name="replyLength"]').forEach(e=>{e.addEventListener("change",e=>{this.replyLength=e.target.value})});const i=this.overlay.querySelector("#reply-guy-research"),s=this.overlay.querySelector("#reply-guy-perplexity");i?.addEventListener("change",()=>{this.needsResearch=i.checked,s&&(s.style.display=this.needsResearch?"block":"none")}),s?.addEventListener("input",()=>{this.perplexityGuidance=s.value});const r=this.overlay.querySelector("#reply-guy-meme"),l=this.overlay.querySelector("#reply-guy-meme-options"),a=this.overlay.querySelector("#reply-guy-meme-text");r?.addEventListener("change",()=>{this.includeMeme=r.checked,l&&(l.style.display=this.includeMeme?"block":"none")}),this.overlay.querySelectorAll('input[name="memeMode"]').forEach(e=>{e.addEventListener("change",e=>{const n=e.target.value;this.memeTextMode=n,a&&(a.style.display="custom"===n?"block":"none")})}),a?.addEventListener("input",()=>{this.memeText=a.value}),this.overlay.querySelector("#reply-guy-generate")?.addEventListener("click",()=>{const n={originalTweet:this.tweet,responseIdea:this.responseIdea,responseType:this.responseType,tone:this.tone,replyLength:this.replyLength,needsResearch:this.needsResearch,perplexityGuidance:this.needsResearch?this.perplexityGuidance:void 0,includeMeme:this.includeMeme,memeText:this.includeMeme&&"custom"===this.memeTextMode?this.memeText:void 0,memeTextMode:this.includeMeme?this.memeTextMode:void 0};e(n)})}getComprehensiveStyles(){return'\n      .reply-guy-overlay {\n        position: fixed;\n        z-index: 10000;\n        background: white;\n        border-radius: 16px;\n        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);\n        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;\n        overflow: hidden;\n        animation: slideIn 0.3s ease-out;\n      }\n\n      @keyframes slideIn {\n        from {\n          opacity: 0;\n          transform: translateY(-20px);\n        }\n        to {\n          opacity: 1;\n          transform: translateY(0);\n        }\n      }\n\n      .reply-guy-header {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        padding: 16px 20px;\n        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n        color: white;\n      }\n\n      .reply-guy-title {\n        display: flex;\n        align-items: center;\n        font-size: 18px;\n        font-weight: 600;\n        gap: 10px;\n      }\n      \n      .reply-guy-logo-icon {\n        width: 28px;\n        height: 28px;\n      }\n\n      .reply-guy-close {\n        width: 32px;\n        height: 32px;\n        border: none;\n        background: rgba(255, 255, 255, 0.2);\n        color: white;\n        border-radius: 8px;\n        cursor: pointer;\n        font-size: 24px;\n        line-height: 1;\n        transition: all 0.2s;\n      }\n\n      .reply-guy-close:hover {\n        background: rgba(255, 255, 255, 0.3);\n        transform: scale(1.05);\n      }\n      \n      .reply-guy-content {\n        padding: 20px;\n      }\n      \n      /* Sections */\n      details {\n        margin-bottom: 16px;\n        border: 1px solid #e9ecef;\n        border-radius: 12px;\n        overflow: hidden;\n      }\n      \n      details summary {\n        padding: 12px 16px;\n        background: #f8f9fa;\n        cursor: pointer;\n        font-weight: 500;\n        color: #495057;\n        user-select: none;\n        transition: background 0.2s;\n      }\n      \n      details summary:hover {\n        background: #e9ecef;\n      }\n      \n      details[open] summary {\n        border-bottom: 1px solid #e9ecef;\n      }\n      \n      .reply-guy-tweet-preview {\n        padding: 16px;\n        font-size: 14px;\n        line-height: 1.5;\n        color: #6c757d;\n      }\n      \n      .reply-guy-main-section {\n        margin-bottom: 16px;\n      }\n      \n      .reply-guy-advanced-content,\n      .reply-guy-extras-content {\n        padding: 16px;\n      }\n      \n      /* Form Elements */\n      .reply-guy-option-group {\n        margin-bottom: 20px;\n      }\n      \n      .reply-guy-option-label {\n        display: block;\n        font-size: 12px;\n        font-weight: 600;\n        color: #6c757d;\n        text-transform: uppercase;\n        margin-bottom: 8px;\n        letter-spacing: 0.5px;\n      }\n      \n      .reply-guy-label-with-action {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 8px;\n      }\n      \n      .reply-guy-response-types {\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        gap: 8px;\n      }\n      \n      .reply-guy-response-type {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        gap: 4px;\n        padding: 12px;\n        border: 2px solid #e9ecef;\n        border-radius: 12px;\n        background: white;\n        cursor: pointer;\n        transition: all 0.2s;\n        font-size: 14px;\n        font-weight: 500;\n      }\n      \n      .reply-guy-response-type:hover {\n        border-color: #667eea;\n        background: #f8f9fa;\n        transform: translateY(-1px);\n      }\n      \n      .reply-guy-response-type.active {\n        border-color: #667eea;\n        background: #667eea;\n        color: white;\n      }\n      \n      .type-emoji {\n        font-size: 20px;\n      }\n      \n      .reply-guy-tone-select,\n      .reply-guy-text-input,\n      .reply-guy-idea-input {\n        width: 100%;\n        padding: 10px 12px;\n        border: 2px solid #e9ecef;\n        border-radius: 8px;\n        font-size: 14px;\n        transition: all 0.2s;\n        font-family: inherit;\n      }\n      \n      .reply-guy-tone-select:focus,\n      .reply-guy-text-input:focus,\n      .reply-guy-idea-input:focus {\n        outline: none;\n        border-color: #667eea;\n        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);\n      }\n      \n      .reply-guy-idea-input {\n        resize: vertical;\n        min-height: 60px;\n      }\n      \n      .reply-guy-idea-input.error {\n        border-color: #dc3545;\n      }\n      \n      .reply-guy-char-count {\n        text-align: right;\n        font-size: 12px;\n        color: #6c757d;\n        margin-top: 4px;\n      }\n      \n      .reply-guy-suggest-btn {\n        display: flex;\n        align-items: center;\n        gap: 4px;\n        padding: 4px 12px;\n        background: #f8f9fa;\n        border: 1px solid #e9ecef;\n        border-radius: 6px;\n        font-size: 12px;\n        color: #667eea;\n        cursor: pointer;\n        transition: all 0.2s;\n      }\n      \n      .reply-guy-suggest-btn:hover {\n        background: #e9ecef;\n        border-color: #667eea;\n      }\n      \n      /* Radio and Checkbox */\n      .reply-guy-length-options,\n      .reply-guy-meme-mode {\n        display: flex;\n        gap: 12px;\n        flex-wrap: wrap;\n      }\n      \n      .reply-guy-radio,\n      .reply-guy-checkbox {\n        display: flex;\n        align-items: center;\n        gap: 6px;\n        cursor: pointer;\n        font-size: 14px;\n        color: #495057;\n      }\n      \n      .reply-guy-radio input[type="radio"],\n      .reply-guy-checkbox input[type="checkbox"] {\n        cursor: pointer;\n      }\n      \n      .reply-guy-radio input[type="radio"]:disabled + span,\n      .reply-guy-checkbox input[type="checkbox"]:disabled + span {\n        opacity: 0.5;\n        cursor: not-allowed;\n      }\n      \n      /* Action Buttons */\n      .reply-guy-actions {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-top: 24px;\n        padding-top: 20px;\n        border-top: 1px solid #e9ecef;\n      }\n      \n      .reply-guy-generate-btn {\n        flex: 1;\n        padding: 14px 24px;\n        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n        color: white;\n        border: none;\n        border-radius: 10px;\n        font-size: 16px;\n        font-weight: 600;\n        cursor: pointer;\n        transition: all 0.3s;\n        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);\n      }\n      \n      .reply-guy-generate-btn:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);\n      }\n      \n      .reply-guy-generate-btn:active {\n        transform: translateY(0);\n      }\n      \n      .reply-guy-usage {\n        margin-left: 16px;\n        font-size: 13px;\n        color: #6c757d;\n        white-space: nowrap;\n      }\n      \n      /* Loading States */\n      .reply-guy-loading {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        padding: 60px;\n        gap: 16px;\n      }\n      \n      .reply-guy-spinner {\n        width: 40px;\n        height: 40px;\n        border: 3px solid #f3f3f3;\n        border-top: 3px solid #667eea;\n        border-radius: 50%;\n        animation: spin 1s linear infinite;\n      }\n      \n      @keyframes spin {\n        0% { transform: rotate(0deg); }\n        100% { transform: rotate(360deg); }\n      }\n      \n      /* Error State */\n      .reply-guy-error {\n        padding: 20px;\n        text-align: center;\n        color: #dc3545;\n        background: #f8d7da;\n        border: 1px solid #f5c6cb;\n        border-radius: 8px;\n        margin: 16px;\n      }\n    '}showGeneratedReply(e,n){this.remove(),this.overlay=document.createElement("div"),this.overlay.className="reply-guy-overlay",this.overlay.innerHTML=`\n      <style>\n        ${this.getComprehensiveStyles()}\n        .reply-guy-result {\n          padding: 20px;\n        }\n        .reply-guy-reply-text {\n          background: #f8f9fa;\n          border: 2px solid #e9ecef;\n          border-radius: 12px;\n          padding: 16px;\n          font-size: 15px;\n          line-height: 1.5;\n          color: #212529;\n          margin-bottom: 16px;\n        }\n        .reply-guy-meme-preview {\n          margin-bottom: 16px;\n        }\n        .reply-guy-meme-preview img {\n          width: 100%;\n          max-width: 300px;\n          height: auto;\n          border-radius: 12px;\n          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n        }\n        .reply-guy-result-actions {\n          display: flex;\n          gap: 12px;\n        }\n        .reply-guy-copy-btn,\n        .reply-guy-insert-btn {\n          flex: 1;\n          padding: 12px 20px;\n          border: none;\n          border-radius: 8px;\n          font-size: 14px;\n          font-weight: 500;\n          cursor: pointer;\n          transition: all 0.2s;\n        }\n        .reply-guy-copy-btn {\n          background: #f8f9fa;\n          border: 2px solid #e9ecef;\n          color: #495057;\n        }\n        .reply-guy-copy-btn:hover {\n          background: #e9ecef;\n          border-color: #dee2e6;\n        }\n        .reply-guy-insert-btn {\n          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n          color: white;\n          box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);\n        }\n        .reply-guy-insert-btn:hover {\n          transform: translateY(-1px);\n          box-shadow: 0 6px 16px rgba(102, 126, 234, 0.4);\n        }\n      </style>\n      <div class="reply-guy-header">\n        <div class="reply-guy-title">\n          <svg viewBox="0 0 24 24" class="reply-guy-logo-icon">\n            <rect width="24" height="24" rx="4" fill="url(#rg-gradient)"/>\n            <defs>\n              <linearGradient id="rg-gradient" x1="0%" y1="0%" x2="100%" y2="100%">\n                <stop offset="0%" style="stop-color:#667eea" />\n                <stop offset="100%" style="stop-color:#764ba2" />\n              </linearGradient>\n            </defs>\n            <text x="50%" y="50%" text-anchor="middle" dominant-baseline="middle" \n                  font-family="Arial, sans-serif" font-size="11" font-weight="bold" fill="white">RG</text>\n          </svg>\n          <span>Your Reply is Ready!</span>\n        </div>\n        <button class="reply-guy-close" aria-label="Close">×</button>\n      </div>\n      \n      <div class="reply-guy-result">\n        <div class="reply-guy-reply-text">\n          ${this.escapeHtml(e)}\n        </div>\n        \n        ${n?`\n        <div class="reply-guy-meme-preview">\n          <img src="${n}" alt="Generated meme" />\n        </div>\n        `:""}\n        \n        <div class="reply-guy-result-actions">\n          <button class="reply-guy-copy-btn">Copy to Clipboard</button>\n          <button class="reply-guy-insert-btn">Insert Reply</button>\n        </div>\n      </div>\n    `;const t=this.container.getBoundingClientRect();this.overlay.style.position="fixed",this.overlay.style.top=`${Math.min(t.bottom+8,window.innerHeight-400)}px`,this.overlay.style.left=`${Math.min(t.left,window.innerWidth-500)}px`,this.overlay.style.width="480px",this.overlay.querySelector(".reply-guy-close")?.addEventListener("click",()=>this.remove()),this.overlay.querySelector(".reply-guy-copy-btn")?.addEventListener("click",()=>{navigator.clipboard.writeText(e).then(()=>{const e=this.overlay?.querySelector(".reply-guy-copy-btn");e&&(e.textContent="Copied!",setTimeout(()=>{e.textContent="Copy to Clipboard"},2e3))})}),this.overlay.querySelector(".reply-guy-insert-btn")?.addEventListener("click",()=>{const n=this.container.querySelector('[role="textbox"]');if(n){n.innerText=e;const t=new Event("input",{bubbles:!0});n.dispatchEvent(t),n.focus()}this.remove()}),setTimeout(()=>{document.addEventListener("click",this.handleOutsideClick)},0),document.body.appendChild(this.overlay)}show(e,n){this.remove(),this.overlay=document.createElement("div"),this.overlay.className="reply-guy-overlay",this.overlay.innerHTML=`\n      <style>\n        .reply-guy-overlay {\n          position: absolute;\n          z-index: 10000;\n          background: white;\n          border-radius: 12px;\n          box-shadow: 0 4px 24px rgba(0, 0, 0, 0.15);\n          padding: 16px;\n          max-width: 500px;\n          margin-top: 8px;\n          animation: slideIn 0.2s ease-out;\n        }\n\n        @keyframes slideIn {\n          from {\n            opacity: 0;\n            transform: translateY(-10px);\n          }\n          to {\n            opacity: 1;\n            transform: translateY(0);\n          }\n        }\n\n        .reply-guy-header {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          margin-bottom: 12px;\n          padding-bottom: 12px;\n          border-bottom: 1px solid #e9ecef;\n        }\n\n        .reply-guy-title {\n          display: flex;\n          align-items: center;\n          font-size: 16px;\n          font-weight: 600;\n          color: #1a1a1a;\n        }\n\n        .reply-guy-logo {\n          width: 20px;\n          height: 20px;\n          margin-right: 8px;\n          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n          border-radius: 4px;\n        }\n\n        .reply-guy-close {\n          width: 24px;\n          height: 24px;\n          border: none;\n          background: none;\n          cursor: pointer;\n          color: #6c757d;\n          font-size: 20px;\n          line-height: 1;\n          transition: color 0.2s;\n        }\n\n        .reply-guy-close:hover {\n          color: #1a1a1a;\n        }\n\n        .reply-guy-suggestions {\n          display: flex;\n          flex-direction: column;\n          gap: 8px;\n        }\n\n        .reply-guy-suggestion {\n          padding: 12px;\n          background: #f8f9fa;\n          border: 1px solid #e9ecef;\n          border-radius: 8px;\n          cursor: pointer;\n          transition: all 0.2s;\n          font-size: 14px;\n          line-height: 1.5;\n          color: #1a1a1a;\n        }\n\n        .reply-guy-suggestion:hover {\n          background: #e9ecef;\n          border-color: #667eea;\n          transform: translateX(4px);\n        }\n\n        .reply-guy-loading {\n          text-align: center;\n          padding: 40px;\n          color: #6c757d;\n        }\n\n        .reply-guy-spinner {\n          width: 32px;\n          height: 32px;\n          border: 3px solid #f3f3f3;\n          border-top: 3px solid #667eea;\n          border-radius: 50%;\n          animation: spin 1s linear infinite;\n          margin: 0 auto 12px;\n        }\n\n        @keyframes spin {\n          0% { transform: rotate(0deg); }\n          100% { transform: rotate(360deg); }\n        }\n      </style>\n      <div class="reply-guy-header">\n        <div class="reply-guy-title">\n          <div class="reply-guy-logo"></div>\n          Reply Suggestions\n        </div>\n        <button class="reply-guy-close" aria-label="Close">×</button>\n      </div>\n      <div class="reply-guy-suggestions">\n        ${e.map((e,n)=>`\n          <div class="reply-guy-suggestion" data-index="${n}">\n            ${this.escapeHtml(e)}\n          </div>\n        `).join("")}\n      </div>\n    `;const t=this.container.getBoundingClientRect();this.overlay.style.position="fixed",this.overlay.style.top=`${t.bottom+window.scrollY}px`,this.overlay.style.left=`${t.left}px`,this.overlay.style.width=`${t.width}px`,this.overlay.querySelector(".reply-guy-close")?.addEventListener("click",()=>this.remove()),this.overlay.querySelectorAll(".reply-guy-suggestion").forEach(t=>{t.addEventListener("click",()=>{const o=parseInt(t.getAttribute("data-index")||"0");n(e[o]),this.remove()})}),setTimeout(()=>{document.addEventListener("click",this.handleOutsideClick)},0),document.body.appendChild(this.overlay)}showLoading(){this.remove(),this.overlay=document.createElement("div"),this.overlay.className="reply-guy-overlay",this.overlay.innerHTML=`\n      <style>\n        ${this.getStyles()}\n      </style>\n      <div class="reply-guy-loading">\n        <div class="reply-guy-spinner"></div>\n        <div>Generating suggestions...</div>\n      </div>\n    `;const e=this.container.getBoundingClientRect();this.overlay.style.position="fixed",this.overlay.style.top=`${e.bottom+window.scrollY}px`,this.overlay.style.left=`${e.left}px`,document.body.appendChild(this.overlay)}showError(e){this.remove(),this.overlay=document.createElement("div"),this.overlay.className="reply-guy-overlay",this.overlay.innerHTML=`\n      <style>\n        ${this.getStyles()}\n        .reply-guy-error {\n          padding: 20px;\n          text-align: center;\n          color: #dc3545;\n        }\n      </style>\n      <div class="reply-guy-header">\n        <div class="reply-guy-title">\n          <div class="reply-guy-logo"></div>\n          Reply Guy\n        </div>\n        <button class="reply-guy-close" aria-label="Close">×</button>\n      </div>\n      <div class="reply-guy-error">\n        ${this.escapeHtml(e)}\n      </div>\n    `;const n=this.container.getBoundingClientRect();this.overlay.style.position="fixed",this.overlay.style.top=`${n.bottom+window.scrollY}px`,this.overlay.style.left=`${n.left}px`,this.overlay.querySelector(".reply-guy-close")?.addEventListener("click",()=>this.remove()),document.body.appendChild(this.overlay)}remove(){this.overlay&&(this.overlay.remove(),this.overlay=null,document.removeEventListener("click",this.handleOutsideClick))}escapeHtml(e){const n=document.createElement("div");return n.textContent=e,n.innerHTML}getStyles(){return"\n      .reply-guy-overlay {\n        position: absolute;\n        z-index: 10000;\n        background: white;\n        border-radius: 12px;\n        box-shadow: 0 4px 24px rgba(0, 0, 0, 0.15);\n        padding: 16px;\n        max-width: 500px;\n        margin-top: 8px;\n        animation: slideIn 0.2s ease-out;\n      }\n      /* ... rest of styles from show() method ... */\n    "}}class n{constructor(){this.observer=null,this.injectedButtons=new WeakMap,this.overlays=new WeakMap,this.isAuthenticated=!1}initialize(){console.log("[ReplyGuy] Initializing X integration"),console.log("[ReplyGuy] Current URL:",window.location.href),chrome.runtime.sendMessage({action:"checkAuth"}).then(e=>{e?.success&&(this.isAuthenticated=e.data.isAuthenticated,console.log("[ReplyGuy] Auth status:",this.isAuthenticated))}).catch(e=>{console.error("[ReplyGuy] Failed to check auth:",e)}),this.setupObserver(),setTimeout(()=>this.injectReplyButtons(),1e3),setTimeout(()=>this.injectReplyButtons(),3e3)}cleanup(){this.observer&&(this.observer.disconnect(),this.observer=null),this.injectedButtons=new WeakMap}handleUrlChange(){setTimeout(()=>this.injectReplyButtons(),500)}setupObserver(){let e=null;this.observer=new MutationObserver(n=>{e&&clearTimeout(e),e=setTimeout(()=>{n.some(e=>"childList"===e.type&&e.addedNodes.length>0&&Array.from(e.addedNodes).some(e=>e instanceof Element&&(e.matches("article")||e.querySelector("article"))))&&(console.log("[ReplyGuy] New tweets detected, re-injecting buttons"),this.injectReplyButtons())},500)}),this.observer.observe(document.body,{childList:!0,subtree:!0})}injectReplyButtons(){console.log("[ReplyGuy] Looking for reply buttons..."),console.log("[ReplyGuy] Current page has",document.querySelectorAll("article").length,"tweet articles");const e=this.findReplyButtons();console.log("[ReplyGuy] Found",e.length,"reply buttons"),e.forEach((e,n)=>{const t=e.closest("article");if(t&&!this.injectedButtons.has(t)){console.log(`[ReplyGuy] Injecting button ${n+1}`);const o=this.createReplyGuyIcon(e,t);o&&this.injectedButtons.set(t,o)}else t||console.log(`[ReplyGuy] No article found for reply button ${n+1}`)})}findReplyButtons(){const e=['[data-testid="reply"]','[aria-label*="Reply"]','[role="button"][aria-label*="Reply"]','div[role="button"] svg path[d*="M1.751 10c0-4.42"]'];let n=[];for(const t of e){const e=document.querySelectorAll(t);if(e.length>0){console.log(`[ReplyGuy] Found ${e.length} reply buttons with selector: ${t}`),n=Array.from(e);break}}return 0===n.length&&console.log("[ReplyGuy] No reply buttons found with any selector"),n}createReplyGuyIcon(e,n){const t=document.createElement("div");t.id=`replyguy-btn-${Date.now()}`,t.setAttribute("role","button"),t.setAttribute("data-testid","replyguy"),t.setAttribute("tabindex","0"),Object.assign(t.style,{display:"inline-flex",alignItems:"center",justifyContent:"center",width:"36px",height:"36px",marginLeft:"12px",cursor:"pointer",position:"relative",borderRadius:"50%",transition:"transform 0.2s ease",zIndex:"1000",border:"none"}),t.innerHTML='\n      <div style="\n        position: relative;\n        width: 36px;\n        height: 36px;\n        border-radius: 50%;\n        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n      ">\n        <svg viewBox="0 0 24 24" style="\n          width: 22px;\n          height: 22px;\n          fill: white;\n        ">\n          <text x="50%" y="50%" \n                text-anchor="middle" \n                dominant-baseline="middle" \n                font-family="Arial, sans-serif" \n                font-size="11" \n                font-weight="bold" \n                fill="white">RG</text>\n        </svg>\n      </div>\n    ',t.addEventListener("mouseenter",()=>{t.style.transform="scale(1.1)"}),t.addEventListener("mouseleave",()=>{t.style.transform="scale(1)"}),t.addEventListener("click",e=>{e.stopPropagation(),this.handleReplyGuyClick(n)});let o=null,i="";const s=e.closest('[role="group"]');if(s&&(o=s,i="role=group"),!o){let n=e.parentElement;for(;n&&n!==document.body;){if(n.querySelectorAll('[role="button"]').length>=3){o=n,i="multiple-buttons-parent";break}n=n.parentElement}}return!o&&e.parentElement&&(o=e.parentElement,i="direct-parent"),o?(e.parentElement&&e.parentElement.parentElement===o?o.insertBefore(t,e.parentElement.nextSibling):o.appendChild(t),console.log(`[ReplyGuy] Button injected using strategy: ${i}`),console.log(`[ReplyGuy] Button ID: ${t.id}`),console.log("[ReplyGuy] Button visibility:",{offsetWidth:t.offsetWidth,offsetHeight:t.offsetHeight,display:window.getComputedStyle(t).display,visibility:window.getComputedStyle(t).visibility}),t):(console.log("[ReplyGuy] Could not find suitable container for button"),null)}async handleReplyGuyClick(n){console.log("[ReplyGuy] Button clicked");const t=await chrome.runtime.sendMessage({action:"checkAuth"});if(!t?.success||!t.data.isAuthenticated)return console.log("[ReplyGuy] User not authenticated, prompting to login"),void(confirm("Please sign in to Reply Guy to use this feature. Would you like to sign in now?")&&chrome.runtime.sendMessage({action:"openLogin"}));const o=n.querySelector('[data-testid="tweetText"]'),i=o?.textContent||"";if(!i)return void console.error("[ReplyGuy] Could not find tweet text");console.log("[ReplyGuy] Tweet text:",i.substring(0,50)+"...");const s=n.querySelector('[data-testid="reply"]');s&&(s.click(),setTimeout(async()=>{const n=document.querySelector('[data-testid="tweetTextarea_0_label"]')?.parentElement;if(!n)return void console.error("Could not find compose area");let t=this.overlays.get(n);t||(t=new e(n),this.overlays.set(n,t)),t.showOptions(i,async e=>{t.showLoading();try{const n=await chrome.runtime.sendMessage({action:"generateReply",data:e});n.success?t.showGeneratedReply(n.data.reply,n.data.memeUrl):t.showError(n.error||"Failed to generate reply")}catch(e){t.showError("Failed to connect to Reply Guy. Please make sure you are logged in.")}})},500))}insertSuggestion(e,n){const t=e.querySelector('[role="textbox"]');if(t){t.innerText=n;const e=new Event("input",{bubbles:!0});t.dispatchEvent(e),t.focus()}}}let t=null,o={isAuthenticated:!1};chrome.runtime.onMessage.addListener((e,i,s)=>{"authStateChanged"===e.action&&(o=e.data,o.isAuthenticated&&!t?(t=new n,t.initialize()):!o.isAuthenticated&&t&&(t.cleanup(),t=null))});let i=location.href;new MutationObserver(()=>{const e=location.href;e!==i&&(i=e,t&&t.handleUrlChange())}).observe(document,{subtree:!0,childList:!0}),async function(){console.log("[ReplyGuy Content] Initializing on:",window.location.href);try{console.log("[ReplyGuy Content] Checking authentication...");const e=await chrome.runtime.sendMessage({action:"checkAuth"});console.log("[ReplyGuy Content] Auth response:",e),e.success&&(o=e.data,console.log("[ReplyGuy Content] Auth state:",o)),o.isAuthenticated?(console.log("[ReplyGuy Content] User authenticated, initializing Twitter integration"),t=new n,t.initialize()):(console.log("[ReplyGuy Content] User not authenticated"),t=new n,t.initialize())}catch(e){console.error("[ReplyGuy Content] Initialization error:",e)}}()})();