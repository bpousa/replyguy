(()=>{"use strict";class e{constructor(e){this.overlay=null,this.responseType="neutral",this.tone="friendly",this.responseIdea="",this.replyLength="short",this.needsResearch=!1,this.perplexityGuidance="",this.includeMeme=!1,this.memeText="",this.memeTextMode="exact",this.tweet="",this.userPlan=null,this.usageLimits=null,this.isSuggestingIdea=!1,this.isSuggestingResearch=!1,this.researchSuggestions=[],this.handleOutsideClick=e=>{const n=e.target,t=n.closest('[data-testid="reply"]')||n.closest('[role="group"]');!this.overlay||this.overlay.contains(n)||t||this.remove()},this.container=e}async showOptions(e,n){this.remove(),this.tweet=e;try{if(!chrome.runtime?.id)return void console.error("[ReplyGuy] Extension context invalid");const e=await chrome.runtime.sendMessage({action:"getUsageLimits"});e.success&&e.data&&(this.usageLimits=e.data,this.userPlan=e.data.userPlan||e.data,console.log("[ReplyGuy] User plan loaded:",this.userPlan),console.log("[ReplyGuy] Usage limits:",this.usageLimits))}catch(e){if(e instanceof Error&&e.message.includes("Extension context invalidated"))return console.error("[ReplyGuy] Extension context invalidated"),alert("Reply Guy extension needs to be refreshed. Please reload this page."),void this.remove();console.error("[ReplyGuy] Failed to get user plan:",e)}this.overlay=document.createElement("div"),this.overlay.className="reply-guy-overlay",this.overlay.innerHTML=`\n      <style>\n        ${this.getComprehensiveStyles()}\n      </style>\n      <div class="reply-guy-header">\n        <div class="reply-guy-title">\n          <svg viewBox="0 0 24 24" class="reply-guy-logo-icon">\n            <rect width="24" height="24" rx="4" fill="url(#rg-gradient)"/>\n            <defs>\n              <linearGradient id="rg-gradient" x1="0%" y1="0%" x2="100%" y2="100%">\n                <stop offset="0%" style="stop-color:#667eea" />\n                <stop offset="100%" style="stop-color:#764ba2" />\n              </linearGradient>\n            </defs>\n            <text x="50%" y="50%" text-anchor="middle" dominant-baseline="middle" \n                  font-family="Arial, sans-serif" font-size="11" font-weight="bold" fill="white">RG</text>\n          </svg>\n          <span>Reply Guy</span>\n        </div>\n        <button class="reply-guy-close" aria-label="Close">×</button>\n      </div>\n      \n      <div class="reply-guy-content">\n        \x3c!-- Tweet Preview --\x3e\n        <details class="reply-guy-tweet-section" open>\n          <summary>Replying to...</summary>\n          <div class="reply-guy-tweet-preview">\n            ${this.escapeHtml(e)}\n          </div>\n        </details>\n        \n        \x3c!-- Main Options --\x3e\n        <div class="reply-guy-main-section">\n          <div class="reply-guy-row">\n            \x3c!-- Response Type --\x3e\n            <div class="reply-guy-option-group reply-guy-half">\n              <label class="reply-guy-option-label" for="reply-guy-response-type">Response Type</label>\n              <select class="reply-guy-select" id="reply-guy-response-type">\n                <option value="agree">👍 Agree</option>\n                <option value="disagree">🤔 Disagree</option>\n                <option value="neutral" selected>💭 Neutral</option>\n                <option value="other">✨ Creative</option>\n              </select>\n            </div>\n            \n            \x3c!-- Tone --\x3e\n            <div class="reply-guy-option-group reply-guy-half">\n              <label class="reply-guy-option-label" for="reply-guy-tone">Tone</label>\n              <select class="reply-guy-select" id="reply-guy-tone">\n                <option value="friendly">😊 Friendly</option>\n                <option value="professional">💼 Professional</option>\n                <option value="casual">👋 Casual</option>\n                <option value="humorous">😄 Humorous</option>\n                <option value="empathetic">❤️ Empathetic</option>\n                <option value="witty">🎯 Witty</option>\n                <option value="sarcastic">😏 Sarcastic</option>\n                <option value="supportive">🤝 Supportive</option>\n                <option value="informative">📚 Informative</option>\n                <option value="formal">🎩 Formal</option>\n              </select>\n            </div>\n          </div>\n          \n          \x3c!-- Response Idea --\x3e\n          <div class="reply-guy-option-group">\n            <div class="reply-guy-label-with-action">\n              <label class="reply-guy-option-label" for="reply-guy-idea">What do you want to say?</label>\n              <button class="reply-guy-suggest-btn" id="reply-guy-suggest">\n                <svg width="14" height="14" viewBox="0 0 24 24" fill="none">\n                  <path d="M12 2L13.09 8.26L19 7L15.45 11.82L21 16L14.5 16.5L15 23L10.18 17.45L5 21L5.5 14.5L0 16L5.55 11.18L2 7L7.91 8.26L9 2L12 2Z" fill="currentColor"/>\n                </svg>\n                Suggest\n              </button>\n            </div>\n            <textarea \n              id="reply-guy-idea" \n              class="reply-guy-idea-input" \n              placeholder="Describe your response (e.g., 'Sympathize and share a similar experience')"\n              rows="3"\n              maxlength="${this.userPlan?.max_response_idea_length||200}"\n            >${this.responseIdea}</textarea>\n            <div class="reply-guy-char-count">\n              <span id="idea-char-count">0</span> / <span id="idea-char-limit">${this.userPlan?.max_response_idea_length||200}</span>\n            </div>\n          \n          \x3c!-- Reply Length --\x3e\n          <div class="reply-guy-option-group">\n            <label class="reply-guy-option-label">Reply Length</label>\n            <div class="reply-guy-length-options">\n              <label class="reply-guy-radio">\n                <input type="radio" name="replyLength" value="short" checked>\n                <span>Short (280)</span>\n              </label>\n              <label class="reply-guy-radio">\n                <input type="radio" name="replyLength" value="medium" ${this.userPlan?.enable_long_replies?"":"disabled"}>\n                <span>Medium (560) ${this.userPlan?.enable_long_replies?"":"🔒"}</span>\n              </label>\n              <label class="reply-guy-radio">\n                <input type="radio" name="replyLength" value="long" ${this.userPlan?.enable_long_replies?"":"disabled"}>\n                <span>Long (1000) ${this.userPlan?.enable_long_replies?"":"🔒"}</span>\n              </label>\n              <label class="reply-guy-radio">\n                <input type="radio" name="replyLength" value="extra-long" ${!this.userPlan?.enable_long_replies||this.userPlan?.max_reply_length<2e3?"disabled":""}>\n                <span>Extra Long (2000) ${!this.userPlan?.enable_long_replies||this.userPlan?.max_reply_length<2e3?"🔒":""}</span>\n              </label>\n            </div>\n          </div>\n        </div>\n        \n        \x3c!-- Advanced Options --\x3e\n        <details class="reply-guy-advanced-section">\n          <summary>Advanced Options</summary>\n          <div class="reply-guy-advanced-content">\n            \n            \x3c!-- Perplexity Research --\x3e\n            ${!1!==this.userPlan?.enable_perplexity_guidance?'\n            <div class="reply-guy-option-group">\n              <label class="reply-guy-checkbox">\n                <input type="checkbox" id="reply-guy-research">\n                <span>Use real-time research 🔍</span>\n              </label>\n              <div id="reply-guy-research-section" style="display: none; margin-top: 12px;">\n                <div class="reply-guy-label-with-action">\n                  <label class="reply-guy-option-label" for="reply-guy-perplexity" style="margin-bottom: 4px;">\n                    Research Guidance (Optional)\n                  </label>\n                  <button class="reply-guy-suggest-btn" id="reply-guy-suggest-research" type="button">\n                    <svg width="14" height="14" viewBox="0 0 24 24" fill="none">\n                      <path d="M12 2L13.09 8.26L19 7L15.45 11.82L21 16L14.5 16.5L15 23L10.18 17.45L5 21L5.5 14.5L0 16L5.55 11.18L2 7L7.91 8.26L9 2L12 2Z" fill="currentColor"/>\n                    </svg>\n                    Suggest\n                  </button>\n                </div>\n                <textarea\n                  id="reply-guy-perplexity" \n                  class="reply-guy-text-input" \n                  placeholder="What specific facts, stats, or current events should we look for?"\n                  rows="2"\n                  maxlength="200"\n                ></textarea>\n                <div id="reply-guy-research-suggestions" style="display: none; margin-top: 8px;">\n                  <p class="reply-guy-suggestion-label">Suggestions:</p>\n                  <div class="reply-guy-suggestion-chips"></div>\n                </div>\n              </div>\n            </div>\n            ':""}\n          </div>\n        </details>\n        \n        \x3c!-- Fun Extras --\x3e\n        ${!1!==this.userPlan?.enable_memes?`\n        <details class="reply-guy-extras-section">\n          <summary>Fun Extras</summary>\n          <div class="reply-guy-extras-content">\n            <div class="reply-guy-option-group">\n              <label class="reply-guy-checkbox">\n                <input type="checkbox" id="reply-guy-meme">\n                <span>Add a meme 🎭</span>\n                <span class="reply-guy-meme-usage">${this.userPlan?.memes_used||0}/${this.userPlan?.meme_limit||0} used</span>\n              </label>\n              <div id="reply-guy-meme-options" style="display: none; margin-top: 12px;">\n                <div class="reply-guy-option-group">\n                  <label class="reply-guy-option-label" style="font-size: 11px;">Meme text (optional)</label>\n                  <input \n                    type="text"\n                    id="reply-guy-meme-text" \n                    class="reply-guy-text-input" \n                    placeholder="e.g., 'this is fine' or 'bugs everywhere'"\n                    maxlength="100"\n                  />\n                </div>\n                \n                \x3c!-- Show mode selector only when user has typed text --\x3e\n                <div id="reply-guy-meme-mode-section" style="display: none; margin-top: 12px;">\n                  <div class="reply-guy-meme-mode">\n                    <label class="reply-guy-radio">\n                      <input type="radio" name="memeTextMode" value="exact" checked>\n                      <span>Use my exact text</span>\n                    </label>\n                    <label class="reply-guy-radio">\n                      <input type="radio" name="memeTextMode" value="enhance">\n                      <span>Make it more creative with AI ✨</span>\n                    </label>\n                  </div>\n                </div>\n                \n                <div class="reply-guy-meme-info">\n                  <p id="meme-info-empty">💡 <strong>Leave blank</strong> = AI creates meme text from your reply</p>\n                  <p id="meme-info-exact" style="display: none;">✏️ Your exact text will be used: "<span id="meme-preview-text"></span>"</p>\n                  <p id="meme-info-enhance" style="display: none;">✨ AI will enhance your idea to make it funnier</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </details>\n        `:""}\n        \n        \x3c!-- Action Buttons --\x3e\n        <div class="reply-guy-actions">\n          <button class="reply-guy-generate-btn" id="reply-guy-generate">\n            Generate Reply\n          </button>\n          ${this.usageLimits?`\n          <div class="reply-guy-usage">\n            <span class="reply-guy-usage-used">${(this.usageLimits.repliesTotal||0)-(this.usageLimits.repliesRemaining||0)}</span> / ${this.usageLimits.repliesTotal||0} replies\n            <span class="reply-guy-usage-detail">(${this.usageLimits.repliesRemaining||0} remaining this billing period)</span>\n          </div>\n          `:""}\n        </div>\n      </div>\n    `;const t=this.container.getBoundingClientRect();this.overlay.style.position="fixed";const i=.8*window.innerHeight;window.innerHeight-t.bottom-16<i&&t.top>i?(this.overlay.style.bottom=window.innerHeight-t.top+8+"px",this.overlay.style.top="auto"):this.overlay.style.top=`${Math.min(t.bottom+8,window.innerHeight-i)}px`,this.overlay.style.left=`${Math.min(t.left,window.innerWidth-500)}px`,this.overlay.style.width="480px",this.attachEventListeners(n),setTimeout(()=>{document.addEventListener("click",this.handleOutsideClick)},0),document.body.appendChild(this.overlay)}attachEventListeners(e){if(!this.overlay)return;this.overlay.querySelector(".reply-guy-close")?.addEventListener("click",()=>this.remove());const n=this.overlay.querySelector("#reply-guy-response-type");n?.addEventListener("change",()=>{this.responseType=n.value});const t=this.overlay.querySelector("#reply-guy-tone");t?.addEventListener("change",()=>{this.tone=t.value});const i=this.overlay.querySelector("#reply-guy-idea"),o=this.overlay.querySelector("#idea-char-count");if(this.overlay.querySelector("#idea-char-limit"),i&&o){const e=this.userPlan?.max_response_idea_length||200,n=()=>{const n=i.value.length;o.textContent=n.toString(),i.classList.toggle("error",n>e)};i.addEventListener("input",()=>{this.responseIdea=i.value,n()}),n()}this.overlay.querySelector("#reply-guy-suggest")?.addEventListener("click",async e=>{if(e.preventDefault(),e.stopPropagation(),console.log("[ReplyGuy] Suggest button clicked"),!this.tweet.trim())return void alert("Please wait for tweet to load");const n=this.overlay?.querySelector("#reply-guy-suggest");if(!n||n.disabled)return;n.disabled=!0;const t=n.innerHTML;n.innerHTML='<svg class="reply-guy-spinner-small" width="14" height="14" viewBox="0 0 24 24"><circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" fill="none" stroke-dasharray="31.4" stroke-dashoffset="10"></circle></svg> Suggesting...';try{if(!chrome.runtime?.id)throw new Error("Extension context invalidated");const e=await chrome.runtime.sendMessage({action:"getSuggestions",data:{tweet:this.tweet,responseType:this.responseType,tone:this.tone}});if(e&&e.success&&e.data?.suggestion)this.responseIdea=e.data.suggestion,i&&(i.value=this.responseIdea,i.dispatchEvent(new Event("input")));else{const n=e?.error||"Failed to get suggestion";console.error("[ReplyGuy] Failed to get suggestion:",n),n.includes("limit")?alert("You have reached your suggestion limit. Please upgrade your plan."):alert("Failed to generate suggestion. Please try again.")}}catch(e){console.error("[ReplyGuy] Suggest error:",e),e instanceof Error&&e.message.includes("Extension context invalidated")?alert("Reply Guy extension needs to be refreshed. Please reload this page."):alert("An error occurred. Please try again.")}finally{n&&this.overlay&&(n.disabled=!1,n.innerHTML=t)}}),this.overlay.querySelectorAll('input[name="replyLength"]').forEach(e=>{e.addEventListener("change",e=>{this.replyLength=e.target.value})});const s=this.overlay.querySelector("#reply-guy-research"),r=this.overlay.querySelector("#reply-guy-research-section"),l=this.overlay.querySelector("#reply-guy-perplexity");s?.addEventListener("change",()=>{this.needsResearch=s.checked,r&&(r.style.display=this.needsResearch?"block":"none")}),l?.addEventListener("input",()=>{this.perplexityGuidance=l.value}),this.overlay.querySelector("#reply-guy-suggest-research")?.addEventListener("click",async e=>{if(e.preventDefault(),e.stopPropagation(),!this.tweet.trim()||!this.responseIdea.trim())return void alert("Please enter a tweet and response idea first");const n=this.overlay?.querySelector("#reply-guy-suggest-research");n&&(n.disabled=!0,n.innerHTML='<svg class="reply-guy-spinner-small" width="14" height="14" viewBox="0 0 24 24"><circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" fill="none" stroke-dasharray="31.4" stroke-dashoffset="10"></circle></svg> Suggesting...');try{if(!chrome.runtime?.id)throw new Error("Extension context invalidated");const e=await chrome.runtime.sendMessage({action:"getSuggestResearch",data:{originalTweet:this.tweet,responseIdea:this.responseIdea,responseType:this.responseType,tone:this.tone}});e.success&&e.data?.suggestions&&(this.researchSuggestions=e.data.suggestions,this.showResearchSuggestions())}catch(e){console.error("[ReplyGuy] Research suggest error:",e),e instanceof Error&&e.message.includes("Extension context invalidated")&&alert("Reply Guy extension needs to be refreshed. Please reload this page.")}finally{n&&(n.disabled=!1,n.innerHTML='<svg width="14" height="14" viewBox="0 0 24 24" fill="none"><path d="M12 2L13.09 8.26L19 7L15.45 11.82L21 16L14.5 16.5L15 23L10.18 17.45L5 21L5.5 14.5L0 16L5.55 11.18L2 7L7.91 8.26L9 2L12 2Z" fill="currentColor"/></svg> Suggest')}});const a=this.overlay.querySelector("#reply-guy-meme"),p=this.overlay.querySelector("#reply-guy-meme-options"),y=this.overlay.querySelector("#reply-guy-meme-text"),d=this.overlay.querySelector("#reply-guy-meme-mode-section"),c=this.overlay.querySelector("#meme-info-empty"),u=this.overlay.querySelector("#meme-info-exact"),g=this.overlay.querySelector("#meme-info-enhance"),h=this.overlay.querySelector("#meme-preview-text");if(a&&this.userPlan){const e=this.userPlan.memes_used<this.userPlan.meme_limit;if(a.disabled=!e,!e){const e=a.parentElement;e&&(e.style.opacity="0.5",e.style.cursor="not-allowed")}}a?.addEventListener("change",()=>{this.includeMeme=a.checked,p&&(p.style.display=this.includeMeme?"block":"none"),this.includeMeme||(this.memeText="",y&&(y.value=""))});const m=()=>{const e=this.memeText.trim().length>0;if(d&&(d.style.display=e?"block":"none"),e){h&&(h.textContent=this.memeText);const e="exact"===this.memeTextMode;c&&(c.style.display="none"),u&&(u.style.display=e?"block":"none"),g&&(g.style.display=e?"none":"block")}else c&&(c.style.display="block"),u&&(u.style.display="none"),g&&(g.style.display="none")};y?.addEventListener("input",()=>{this.memeText=y.value,m()}),this.overlay.querySelectorAll('input[name="memeTextMode"]').forEach(e=>{e.addEventListener("change",e=>{this.memeTextMode=e.target.value,m()})}),this.overlay.querySelector("#reply-guy-generate")?.addEventListener("click",()=>{if(!this.responseIdea.trim())return void alert("Please describe what you want to say");const n={originalTweet:this.tweet,responseIdea:this.responseIdea,responseType:this.responseType,tone:this.tone,replyLength:this.replyLength,needsResearch:this.needsResearch,perplexityGuidance:this.needsResearch?this.perplexityGuidance:void 0,includeMeme:this.includeMeme,memeText:this.includeMeme&&this.memeText?this.memeText:void 0,memeTextMode:this.includeMeme&&this.memeText?this.memeTextMode:void 0,useCustomStyle:!1};console.log("[ReplyGuy] Generating with data:",n),e(n)})}getComprehensiveStyles(){return'\n      .reply-guy-overlay {\n        position: fixed;\n        z-index: 10000;\n        background: white;\n        border-radius: 16px;\n        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);\n        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;\n        overflow: hidden;\n        animation: slideIn 0.3s ease-out;\n        display: flex;\n        flex-direction: column;\n        max-height: 80vh; /* Limit to 80% of viewport height */\n      }\n\n      @keyframes slideIn {\n        from {\n          opacity: 0;\n          transform: translateY(-20px);\n        }\n        to {\n          opacity: 1;\n          transform: translateY(0);\n        }\n      }\n\n      .reply-guy-header {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        padding: 16px 20px;\n        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n        color: white;\n        flex-shrink: 0; /* Prevent header from shrinking */\n      }\n\n      .reply-guy-title {\n        display: flex;\n        align-items: center;\n        font-size: 18px;\n        font-weight: 600;\n        gap: 10px;\n      }\n      \n      .reply-guy-logo-icon {\n        width: 28px;\n        height: 28px;\n      }\n\n      .reply-guy-close {\n        width: 32px;\n        height: 32px;\n        border: none;\n        background: rgba(255, 255, 255, 0.2);\n        color: white;\n        border-radius: 8px;\n        cursor: pointer;\n        font-size: 24px;\n        line-height: 1;\n        transition: all 0.2s;\n      }\n\n      .reply-guy-close:hover {\n        background: rgba(255, 255, 255, 0.3);\n        transform: scale(1.05);\n      }\n      \n      .reply-guy-content {\n        padding: 20px;\n        overflow-y: auto;\n        flex: 1;\n        max-height: calc(80vh - 80px); /* Account for header height */\n      }\n      \n      /* Sections */\n      details {\n        margin-bottom: 16px;\n        border: 1px solid #e9ecef;\n        border-radius: 12px;\n        overflow: hidden;\n      }\n      \n      details summary {\n        padding: 12px 16px;\n        background: #f8f9fa;\n        cursor: pointer;\n        font-weight: 500;\n        color: #495057;\n        user-select: none;\n        transition: background 0.2s;\n      }\n      \n      details summary:hover {\n        background: #e9ecef;\n      }\n      \n      details[open] summary {\n        border-bottom: 1px solid #e9ecef;\n      }\n      \n      .reply-guy-tweet-preview {\n        padding: 16px;\n        font-size: 14px;\n        line-height: 1.5;\n        color: #6c757d;\n        max-height: 150px;\n        overflow-y: auto;\n      }\n      \n      .reply-guy-row {\n        display: flex;\n        gap: 12px;\n        margin-bottom: 20px;\n      }\n      \n      .reply-guy-half {\n        flex: 1;\n      }\n      \n      .reply-guy-select {\n        width: 100%;\n        padding: 10px 12px;\n        border: 2px solid #e9ecef;\n        border-radius: 8px;\n        font-size: 14px;\n        color: #212529; /* Explicitly set text color */\n        transition: all 0.2s;\n        font-family: inherit;\n        background: white;\n        cursor: pointer;\n        -webkit-appearance: none; /* Remove default styling */\n      }\n      \n      .reply-guy-select option {\n        color: #212529; /* Ensure option text is visible */\n        background: white;\n      }\n      \n      .reply-guy-select:focus {\n        outline: none;\n        border-color: #667eea;\n        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);\n      }\n      \n      .reply-guy-main-section {\n        margin-bottom: 16px;\n      }\n      \n      .reply-guy-advanced-content,\n      .reply-guy-extras-content {\n        padding: 16px;\n      }\n      \n      /* Form Elements */\n      .reply-guy-option-group {\n        margin-bottom: 20px;\n      }\n      \n      .reply-guy-option-label {\n        display: block;\n        font-size: 12px;\n        font-weight: 600;\n        color: #6c757d;\n        text-transform: uppercase;\n        margin-bottom: 8px;\n        letter-spacing: 0.5px;\n      }\n      \n      .reply-guy-label-with-action {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 8px;\n      }\n      \n      \n      .reply-guy-text-input,\n      .reply-guy-idea-input {\n        width: 100%;\n        padding: 10px 12px;\n        border: 2px solid #e9ecef;\n        border-radius: 8px;\n        font-size: 14px;\n        transition: all 0.2s;\n        font-family: inherit;\n      }\n      \n      .reply-guy-text-input:focus,\n      .reply-guy-idea-input:focus {\n        outline: none;\n        border-color: #667eea;\n        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);\n      }\n      \n      .reply-guy-idea-input {\n        resize: vertical;\n        min-height: 60px;\n      }\n      \n      .reply-guy-idea-input.error {\n        border-color: #dc3545;\n      }\n      \n      .reply-guy-char-count {\n        text-align: right;\n        font-size: 12px;\n        color: #6c757d;\n        margin-top: 4px;\n      }\n      \n      .reply-guy-suggest-btn {\n        display: flex;\n        align-items: center;\n        gap: 4px;\n        padding: 4px 12px;\n        background: #f8f9fa;\n        border: 1px solid #e9ecef;\n        border-radius: 6px;\n        font-size: 12px;\n        color: #667eea;\n        cursor: pointer;\n        transition: all 0.2s;\n      }\n      \n      .reply-guy-suggest-btn:hover {\n        background: #e9ecef;\n        border-color: #667eea;\n      }\n      \n      /* Radio and Checkbox */\n      .reply-guy-length-options,\n      .reply-guy-meme-mode {\n        display: flex;\n        gap: 12px;\n        flex-wrap: wrap;\n      }\n      \n      .reply-guy-radio,\n      .reply-guy-checkbox {\n        display: flex;\n        align-items: center;\n        gap: 6px;\n        cursor: pointer;\n        font-size: 14px;\n        color: #495057;\n      }\n      \n      .reply-guy-radio input[type="radio"],\n      .reply-guy-checkbox input[type="checkbox"] {\n        cursor: pointer;\n      }\n      \n      .reply-guy-radio input[type="radio"]:disabled + span,\n      .reply-guy-checkbox input[type="checkbox"]:disabled + span {\n        opacity: 0.5;\n        cursor: not-allowed;\n      }\n      \n      /* Action Buttons */\n      .reply-guy-actions {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-top: 24px;\n        padding-top: 20px;\n        border-top: 1px solid #e9ecef;\n      }\n      \n      .reply-guy-generate-btn {\n        flex: 1;\n        padding: 14px 24px;\n        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n        color: white;\n        border: none;\n        border-radius: 10px;\n        font-size: 16px;\n        font-weight: 600;\n        cursor: pointer;\n        transition: all 0.3s;\n        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);\n      }\n      \n      .reply-guy-generate-btn:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);\n      }\n      \n      .reply-guy-generate-btn:active {\n        transform: translateY(0);\n      }\n      \n      .reply-guy-usage {\n        margin-left: 16px;\n        font-size: 13px;\n        color: #6c757d;\n        white-space: nowrap;\n        display: flex;\n        flex-direction: column;\n        align-items: flex-end;\n        gap: 2px;\n      }\n      \n      .reply-guy-usage-remaining {\n        font-weight: 600;\n        color: #495057;\n      }\n      \n      .reply-guy-usage-detail {\n        font-size: 11px;\n        color: #adb5bd;\n      }\n      \n      /* Research suggestions */\n      .reply-guy-suggestion-label {\n        font-size: 12px;\n        font-weight: 600;\n        color: #6c757d;\n        margin-bottom: 6px;\n      }\n      \n      .reply-guy-suggestion-chips {\n        display: flex;\n        flex-wrap: wrap;\n        gap: 6px;\n      }\n      \n      .reply-guy-suggestion-chip {\n        padding: 6px 12px;\n        background: #f8f9fa;\n        border: 1px solid #e9ecef;\n        border-radius: 16px;\n        font-size: 12px;\n        color: #495057;\n        cursor: pointer;\n        transition: all 0.2s;\n      }\n      \n      .reply-guy-suggestion-chip:hover {\n        background: #e9ecef;\n        border-color: #667eea;\n        color: #667eea;\n      }\n      \n      /* Meme styles */\n      .reply-guy-meme-usage {\n        font-size: 11px;\n        color: #6c757d;\n        margin-left: 8px;\n      }\n      \n      .reply-guy-meme-info {\n        margin-top: 8px;\n        padding: 8px;\n        background: #f8f9fa;\n        border-radius: 6px;\n        font-size: 12px;\n        color: #495057;\n      }\n      \n      .reply-guy-meme-info p {\n        margin: 0;\n      }\n      \n      .reply-guy-meme-info strong {\n        font-weight: 600;\n      }\n      \n      /* Spinner for loading */\n      .reply-guy-spinner-small {\n        animation: spin 1s linear infinite;\n        display: inline-block;\n        vertical-align: middle;\n      }\n      \n      /* Loading States */\n      .reply-guy-loading {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        padding: 60px;\n        gap: 16px;\n      }\n      \n      .reply-guy-loading img {\n        animation: pulse 2s ease-in-out infinite;\n      }\n      \n      @keyframes pulse {\n        0%, 100% {\n          transform: scale(1);\n          opacity: 1;\n        }\n        50% {\n          transform: scale(1.05);\n          opacity: 0.8;\n        }\n      }\n      \n      .reply-guy-spinner {\n        width: 40px;\n        height: 40px;\n        border: 3px solid #f3f3f3;\n        border-top: 3px solid #667eea;\n        border-radius: 50%;\n        animation: spin 1s linear infinite;\n      }\n      \n      @keyframes spin {\n        0% { transform: rotate(0deg); }\n        100% { transform: rotate(360deg); }\n      }\n      \n      /* Loading dots animation */\n      .reply-guy-loading-text {\n        color: #666;\n        font-size: 16px;\n        display: flex;\n        align-items: center;\n        gap: 4px;\n      }\n      \n      .reply-guy-loading-dots {\n        display: inline-flex;\n        gap: 3px;\n      }\n      \n      .reply-guy-loading-dot {\n        width: 6px;\n        height: 6px;\n        background: #667eea;\n        border-radius: 50%;\n        display: inline-block;\n        animation: loadingDot 1.4s infinite ease-in-out both;\n      }\n      \n      .reply-guy-loading-dot:nth-child(1) {\n        animation-delay: -0.32s;\n      }\n      \n      .reply-guy-loading-dot:nth-child(2) {\n        animation-delay: -0.16s;\n      }\n      \n      @keyframes loadingDot {\n        0%, 80%, 100% {\n          transform: scale(0.8);\n          opacity: 0.5;\n        }\n        40% {\n          transform: scale(1.2);\n          opacity: 1;\n        }\n      }\n      \n      /* Error State */\n      .reply-guy-error {\n        padding: 20px;\n        text-align: center;\n        color: #dc3545;\n        background: #f8d7da;\n        border: 1px solid #f5c6cb;\n        border-radius: 8px;\n        margin: 16px;\n      }\n    '}showGeneratedReply(e,n){this.remove(),this.overlay=document.createElement("div"),this.overlay.className="reply-guy-overlay",this.overlay.innerHTML=`\n      <style>\n        ${this.getComprehensiveStyles()}\n        .reply-guy-result {\n          padding: 20px;\n        }\n        .reply-guy-reply-text {\n          background: #f8f9fa;\n          border: 2px solid #e9ecef;\n          border-radius: 12px;\n          padding: 16px;\n          font-size: 15px;\n          line-height: 1.5;\n          color: #212529;\n          margin-bottom: 16px;\n        }\n        .reply-guy-meme-preview {\n          margin-bottom: 16px;\n          text-align: center;\n        }\n        .reply-guy-meme-preview img {\n          width: 100%;\n          max-width: 300px;\n          max-height: 300px;\n          height: auto;\n          object-fit: contain;\n          border-radius: 12px;\n          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n        }\n        .reply-guy-result-actions {\n          display: flex;\n          gap: 12px;\n        }\n        .reply-guy-copy-btn,\n        .reply-guy-insert-btn {\n          flex: 1;\n          padding: 12px 20px;\n          border: none;\n          border-radius: 8px;\n          font-size: 14px;\n          font-weight: 500;\n          cursor: pointer;\n          transition: all 0.2s;\n        }\n        .reply-guy-copy-btn {\n          background: #f8f9fa;\n          border: 2px solid #e9ecef;\n          color: #495057;\n        }\n        .reply-guy-copy-btn:hover {\n          background: #e9ecef;\n          border-color: #dee2e6;\n        }\n        .reply-guy-insert-btn {\n          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n          color: white;\n          box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);\n        }\n        .reply-guy-insert-btn:hover {\n          transform: translateY(-1px);\n          box-shadow: 0 6px 16px rgba(102, 126, 234, 0.4);\n        }\n      </style>\n      <div class="reply-guy-header">\n        <div class="reply-guy-title">\n          <svg viewBox="0 0 24 24" class="reply-guy-logo-icon">\n            <rect width="24" height="24" rx="4" fill="url(#rg-gradient)"/>\n            <defs>\n              <linearGradient id="rg-gradient" x1="0%" y1="0%" x2="100%" y2="100%">\n                <stop offset="0%" style="stop-color:#667eea" />\n                <stop offset="100%" style="stop-color:#764ba2" />\n              </linearGradient>\n            </defs>\n            <text x="50%" y="50%" text-anchor="middle" dominant-baseline="middle" \n                  font-family="Arial, sans-serif" font-size="11" font-weight="bold" fill="white">RG</text>\n          </svg>\n          <span>Your Reply is Ready!</span>\n        </div>\n        <button class="reply-guy-close" aria-label="Close">×</button>\n      </div>\n      \n      <div class="reply-guy-result">\n        <div class="reply-guy-reply-text">\n          ${this.escapeHtml(e)}\n        </div>\n        \n        ${n?`\n        <div class="reply-guy-meme-preview">\n          <img src="${n}" alt="Generated meme" />\n        </div>\n        `:""}\n        \n        <div class="reply-guy-result-actions">\n          <button class="reply-guy-copy-btn">Copy to Clipboard</button>\n          <button class="reply-guy-insert-btn">Insert Reply</button>\n        </div>\n      </div>\n    `;const t=this.container.getBoundingClientRect();this.overlay.style.position="fixed";const i=.8*window.innerHeight;window.innerHeight-t.bottom-16<i&&t.top>i?(this.overlay.style.bottom=window.innerHeight-t.top+8+"px",this.overlay.style.top="auto"):this.overlay.style.top=`${Math.min(t.bottom+8,window.innerHeight-i)}px`,this.overlay.style.left=`${Math.min(t.left,window.innerWidth-500)}px`,this.overlay.style.width="480px",this.overlay.querySelector(".reply-guy-close")?.addEventListener("click",()=>this.remove()),this.overlay.querySelector(".reply-guy-copy-btn")?.addEventListener("click",()=>{navigator.clipboard.writeText(e).then(()=>{const e=this.overlay?.querySelector(".reply-guy-copy-btn");e&&(e.textContent="Copied!",setTimeout(()=>{e.textContent="Copy to Clipboard"},2e3))})}),this.overlay.querySelector(".reply-guy-insert-btn")?.addEventListener("click",()=>{this.insertGeneratedReply(this.container,e),this.remove()}),setTimeout(()=>{document.addEventListener("click",this.handleOutsideClick)},0),document.body.appendChild(this.overlay)}show(e,n){this.remove(),this.overlay=document.createElement("div"),this.overlay.className="reply-guy-overlay",this.overlay.innerHTML=`\n      <style>\n        .reply-guy-overlay {\n          position: absolute;\n          z-index: 10000;\n          background: white;\n          border-radius: 12px;\n          box-shadow: 0 4px 24px rgba(0, 0, 0, 0.15);\n          padding: 16px;\n          max-width: 500px;\n          margin-top: 8px;\n          animation: slideIn 0.2s ease-out;\n        }\n\n        @keyframes slideIn {\n          from {\n            opacity: 0;\n            transform: translateY(-10px);\n          }\n          to {\n            opacity: 1;\n            transform: translateY(0);\n          }\n        }\n\n        .reply-guy-header {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          margin-bottom: 12px;\n          padding-bottom: 12px;\n          border-bottom: 1px solid #e9ecef;\n        }\n\n        .reply-guy-title {\n          display: flex;\n          align-items: center;\n          font-size: 16px;\n          font-weight: 600;\n          color: #1a1a1a;\n        }\n\n        .reply-guy-logo {\n          width: 20px;\n          height: 20px;\n          margin-right: 8px;\n          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n          border-radius: 4px;\n        }\n\n        .reply-guy-close {\n          width: 24px;\n          height: 24px;\n          border: none;\n          background: none;\n          cursor: pointer;\n          color: #6c757d;\n          font-size: 20px;\n          line-height: 1;\n          transition: color 0.2s;\n        }\n\n        .reply-guy-close:hover {\n          color: #1a1a1a;\n        }\n\n        .reply-guy-suggestions {\n          display: flex;\n          flex-direction: column;\n          gap: 8px;\n        }\n\n        .reply-guy-suggestion {\n          padding: 12px;\n          background: #f8f9fa;\n          border: 1px solid #e9ecef;\n          border-radius: 8px;\n          cursor: pointer;\n          transition: all 0.2s;\n          font-size: 14px;\n          line-height: 1.5;\n          color: #1a1a1a;\n        }\n\n        .reply-guy-suggestion:hover {\n          background: #e9ecef;\n          border-color: #667eea;\n          transform: translateX(4px);\n        }\n\n        .reply-guy-loading {\n          text-align: center;\n          padding: 40px;\n          color: #6c757d;\n        }\n\n        .reply-guy-spinner {\n          width: 32px;\n          height: 32px;\n          border: 3px solid #f3f3f3;\n          border-top: 3px solid #667eea;\n          border-radius: 50%;\n          animation: spin 1s linear infinite;\n          margin: 0 auto 12px;\n        }\n\n        @keyframes spin {\n          0% { transform: rotate(0deg); }\n          100% { transform: rotate(360deg); }\n        }\n      </style>\n      <div class="reply-guy-header">\n        <div class="reply-guy-title">\n          <div class="reply-guy-logo"></div>\n          Reply Suggestions\n        </div>\n        <button class="reply-guy-close" aria-label="Close">×</button>\n      </div>\n      <div class="reply-guy-suggestions">\n        ${e.map((e,n)=>`\n          <div class="reply-guy-suggestion" data-index="${n}">\n            ${this.escapeHtml(e)}\n          </div>\n        `).join("")}\n      </div>\n    `;const t=this.container.getBoundingClientRect();this.overlay.style.position="fixed",this.overlay.style.top=`${t.bottom+window.scrollY}px`,this.overlay.style.left=`${t.left}px`,this.overlay.style.width=`${t.width}px`,this.overlay.querySelector(".reply-guy-close")?.addEventListener("click",()=>this.remove()),this.overlay.querySelectorAll(".reply-guy-suggestion").forEach(t=>{t.addEventListener("click",()=>{const i=parseInt(t.getAttribute("data-index")||"0");n(e[i]),this.remove()})}),setTimeout(()=>{document.addEventListener("click",this.handleOutsideClick)},0),document.body.appendChild(this.overlay)}showLoading(){this.remove(),this.overlay=document.createElement("div"),this.overlay.className="reply-guy-overlay",this.overlay.innerHTML=`\n      <style>\n        ${this.getComprehensiveStyles()}\n      </style>\n      <div class="reply-guy-header">\n        <div class="reply-guy-title">\n          <svg viewBox="0 0 24 24" class="reply-guy-logo-icon">\n            <rect width="24" height="24" rx="4" fill="url(#rg-gradient)"/>\n            <defs>\n              <linearGradient id="rg-gradient" x1="0%" y1="0%" x2="100%" y2="100%">\n                <stop offset="0%" style="stop-color:#667eea" />\n                <stop offset="100%" style="stop-color:#764ba2" />\n              </linearGradient>\n            </defs>\n            <text x="50%" y="50%" text-anchor="middle" dominant-baseline="middle" \n                  font-family="Arial, sans-serif" font-size="11" font-weight="bold" fill="white">RG</text>\n          </svg>\n          <span>Reply Guy</span>\n        </div>\n      </div>\n      <div class="reply-guy-loading">\n        <img src="${chrome.runtime.getURL("icons/reply_guy_logo.png")}" alt="Generating..." />\n        <div class="reply-guy-loading-text">\n          Crafting the perfect reply\n          <span class="reply-guy-loading-dots">\n            <span class="reply-guy-loading-dot"></span>\n            <span class="reply-guy-loading-dot"></span>\n            <span class="reply-guy-loading-dot"></span>\n          </span>\n        </div>\n      </div>\n    `;const e=this.container.getBoundingClientRect();this.overlay.style.position="fixed";const n=.8*window.innerHeight;window.innerHeight-e.bottom-16<n&&e.top>n?(this.overlay.style.bottom=window.innerHeight-e.top+8+"px",this.overlay.style.top="auto"):this.overlay.style.top=`${Math.min(e.bottom+8,window.innerHeight-n)}px`,this.overlay.style.left=`${Math.min(e.left,window.innerWidth-500)}px`,this.overlay.style.width="400px",document.body.appendChild(this.overlay)}showError(e){this.remove(),this.overlay=document.createElement("div"),this.overlay.className="reply-guy-overlay",this.overlay.innerHTML=`\n      <style>\n        ${this.getComprehensiveStyles()}\n        .reply-guy-error {\n          padding: 20px;\n          text-align: center;\n          color: #dc3545;\n          font-size: 14px;\n          line-height: 1.5;\n        }\n        .reply-guy-error-icon {\n          font-size: 48px;\n          margin-bottom: 12px;\n        }\n      </style>\n      <div class="reply-guy-header">\n        <div class="reply-guy-title">\n          <svg viewBox="0 0 24 24" class="reply-guy-logo-icon">\n            <rect width="24" height="24" rx="4" fill="url(#rg-gradient)"/>\n            <defs>\n              <linearGradient id="rg-gradient" x1="0%" y1="0%" x2="100%" y2="100%">\n                <stop offset="0%" style="stop-color:#667eea" />\n                <stop offset="100%" style="stop-color:#764ba2" />\n              </linearGradient>\n            </defs>\n            <text x="50%" y="50%" text-anchor="middle" dominant-baseline="middle" \n                  font-family="Arial, sans-serif" font-size="11" font-weight="bold" fill="white">RG</text>\n          </svg>\n          <span>Reply Guy</span>\n        </div>\n        <button class="reply-guy-close" aria-label="Close">×</button>\n      </div>\n      <div class="reply-guy-error">\n        <div class="reply-guy-error-icon">⚠️</div>\n        ${this.escapeHtml(e)}\n      </div>\n    `;const n=this.container.getBoundingClientRect();this.overlay.style.position="fixed";const t=.8*window.innerHeight;window.innerHeight-n.bottom-16<t&&n.top>t?(this.overlay.style.bottom=window.innerHeight-n.top+8+"px",this.overlay.style.top="auto"):this.overlay.style.top=`${Math.min(n.bottom+8,window.innerHeight-t)}px`,this.overlay.style.left=`${Math.min(n.left,window.innerWidth-500)}px`,this.overlay.style.width="400px",this.overlay.querySelector(".reply-guy-close")?.addEventListener("click",()=>this.remove()),document.body.appendChild(this.overlay)}remove(){this.overlay&&(this.overlay.remove(),this.overlay=null,document.removeEventListener("click",this.handleOutsideClick))}escapeHtml(e){const n=document.createElement("div");return n.textContent=e,n.innerHTML}showResearchSuggestions(){const e=this.overlay?.querySelector("#reply-guy-research-suggestions"),n=this.overlay?.querySelector(".reply-guy-suggestion-chips"),t=this.overlay?.querySelector("#reply-guy-perplexity");e&&n&&this.researchSuggestions.length&&(e.style.display="block",n.innerHTML="",this.researchSuggestions.forEach(e=>{const i=document.createElement("button");i.className="reply-guy-suggestion-chip",i.textContent=e,i.addEventListener("click",()=>{this.perplexityGuidance=e,t&&(t.value=e)}),n.appendChild(i)}))}insertGeneratedReply(e,n){const t=e.querySelector('[role="textbox"]');if(t){const e=Object.getOwnPropertyDescriptor(window.HTMLTextAreaElement.prototype,"value")?.set;if(e){e.call(t,n);const i=new Event("input",{bubbles:!0});t.dispatchEvent(i),t.focus()}else{t.innerText=n;const e=new Event("input",{bubbles:!0});t.dispatchEvent(e),t.focus()}}}}class n{constructor(){this.observer=null,this.injectedButtons=new WeakMap,this.overlays=new WeakMap,this.isAuthenticated=!1}initialize(){console.log("[ReplyGuy] Initializing X integration"),console.log("[ReplyGuy] Current URL:",window.location.href),chrome.runtime?.id?(chrome.runtime.sendMessage({action:"checkAuth"}).then(e=>{e?.success&&(this.isAuthenticated=e.data.isAuthenticated,console.log("[ReplyGuy] Auth status:",this.isAuthenticated))}).catch(e=>{e.message?.includes("Extension context invalidated")?console.error("[ReplyGuy] Extension context invalidated during auth check"):console.error("[ReplyGuy] Failed to check auth:",e)}),this.setupObserver(),setTimeout(()=>this.injectReplyButtons(),1e3),setTimeout(()=>this.injectReplyButtons(),3e3)):console.error("[ReplyGuy] Extension context invalid during initialization")}cleanup(){this.observer&&(this.observer.disconnect(),this.observer=null),this.injectedButtons=new WeakMap}handleUrlChange(){setTimeout(()=>this.injectReplyButtons(),500)}setupObserver(){let e=null;this.observer=new MutationObserver(n=>{e&&clearTimeout(e),e=setTimeout(()=>{n.some(e=>"childList"===e.type&&e.addedNodes.length>0&&Array.from(e.addedNodes).some(e=>e instanceof Element&&(e.matches("article")||e.querySelector("article"))))&&(console.log("[ReplyGuy] New tweets detected, re-injecting buttons"),this.injectReplyButtons())},500)}),this.observer.observe(document.body,{childList:!0,subtree:!0})}injectReplyButtons(){console.log("[ReplyGuy] Looking for reply buttons..."),console.log("[ReplyGuy] Current page has",document.querySelectorAll("article").length,"tweet articles");const e=this.findReplyButtons();console.log("[ReplyGuy] Found",e.length,"reply buttons"),e.forEach((e,n)=>{const t=e.closest("article");if(t&&!this.injectedButtons.has(t)){console.log(`[ReplyGuy] Injecting button ${n+1}`);const i=this.createReplyGuyIcon(e,t);i&&this.injectedButtons.set(t,i)}else t||console.log(`[ReplyGuy] No article found for reply button ${n+1}`)})}findReplyButtons(){const e=['[data-testid="reply"]','[aria-label*="Reply"]','[role="button"][aria-label*="Reply"]','div[role="button"] svg path[d*="M1.751 10c0-4.42"]'];let n=[];for(const t of e){const e=document.querySelectorAll(t);if(e.length>0){console.log(`[ReplyGuy] Found ${e.length} reply buttons with selector: ${t}`),n=Array.from(e);break}}return 0===n.length&&console.log("[ReplyGuy] No reply buttons found with any selector"),n}createReplyGuyIcon(e,n){const t=document.createElement("div");t.id=`replyguy-btn-${Date.now()}`,t.setAttribute("role","button"),t.setAttribute("data-testid","replyguy"),t.setAttribute("tabindex","0"),Object.assign(t.style,{display:"inline-flex",alignItems:"center",justifyContent:"center",width:"24px",height:"24px",marginLeft:"12px",cursor:"pointer",position:"relative",borderRadius:"50%",transition:"transform 0.2s ease",zIndex:"1000"}),t.innerHTML=`<img src="${chrome.runtime.getURL("icons/reply_guy_logo.png")}" style="width: 24px; height: 24px;" />`,t.addEventListener("mouseenter",()=>{t.style.transform="scale(1.1)"}),t.addEventListener("mouseleave",()=>{t.style.transform="scale(1)"}),t.addEventListener("click",e=>{e.stopPropagation(),this.handleReplyGuyClick(n)});let i=null,o="";const s=e.closest('[role="group"]');if(s&&(i=s,o="role=group"),!i){let n=e.parentElement;for(;n&&n!==document.body;){if(n.querySelectorAll('[role="button"]').length>=3){i=n,o="multiple-buttons-parent";break}n=n.parentElement}}return!i&&e.parentElement&&(i=e.parentElement,o="direct-parent"),i?(e.parentElement&&e.parentElement.parentElement===i?i.insertBefore(t,e.parentElement.nextSibling):i.appendChild(t),console.log(`[ReplyGuy] Button injected using strategy: ${o}`),console.log(`[ReplyGuy] Button ID: ${t.id}`),console.log("[ReplyGuy] Button visibility:",{offsetWidth:t.offsetWidth,offsetHeight:t.offsetHeight,display:window.getComputedStyle(t).display,visibility:window.getComputedStyle(t).visibility}),t):(console.log("[ReplyGuy] Could not find suitable container for button"),null)}async handleReplyGuyClick(n){if(console.log("[ReplyGuy] Button clicked"),!chrome.runtime?.id)return console.error("[ReplyGuy] Extension context invalidated"),void alert("Reply Guy extension needs to be refreshed. Please reload this page.");try{const e=await chrome.runtime.sendMessage({action:"checkAuth"});if(!e?.success||!e.data.isAuthenticated)return console.log("[ReplyGuy] User not authenticated, prompting to login"),void(confirm("Please sign in to Reply Guy to use this feature. Would you like to sign in now?")&&chrome.runtime.sendMessage({action:"openLogin"}))}catch(e){if(e instanceof Error&&e.message.includes("Extension context invalidated"))return console.error("[ReplyGuy] Extension context invalidated"),void alert("Reply Guy extension needs to be refreshed. Please reload this page.");throw e}const t=n.querySelector('[data-testid="tweetText"]'),i=t?.textContent||"";if(!i)return void console.error("[ReplyGuy] Could not find tweet text");console.log("[ReplyGuy] Tweet text:",i.substring(0,50)+"...");const o=n.querySelector('[data-testid="reply"]');o&&(o.click(),setTimeout(async()=>{const n=document.querySelector('[data-testid="tweetTextarea_0_label"]')?.parentElement;if(!n)return void console.error("Could not find compose area");let t=this.overlays.get(n);t||(t=new e(n),this.overlays.set(n,t)),t.showOptions(i,async e=>{t.showLoading();try{if(!chrome.runtime?.id)return void t.showError("Extension needs to be refreshed. Please reload this page.");const n=await chrome.runtime.sendMessage({action:"generateReply",data:e});if(console.log("[ReplyGuy] Generate reply response:",n),n.success){const e=n.data.data||n.data;console.log("[ReplyGuy] Reply data extracted:",e),e.trackingStatus?(console.log("[ReplyGuy] 📊 Daily Usage Tracking Status:",{success:e.trackingStatus.success,date:e.trackingStatus.date,timezone:e.trackingStatus.timezone,error:e.trackingStatus.error||"none"}),e.trackingStatus.success||console.error("[ReplyGuy] ❌ Failed to track daily usage:",e.trackingStatus.error)):console.warn("[ReplyGuy] ⚠️ No tracking status returned from API"),t.showGeneratedReply(e.reply||"Failed to generate reply",e.memeUrl)}else t.showError(n.error||"Failed to generate reply")}catch(e){e instanceof Error&&e.message.includes("Extension context invalidated")?t.showError("Extension needs to be refreshed. Please reload this page."):t.showError("Failed to connect to Reply Guy. Please make sure you are logged in."),console.error("[ReplyGuy] Error generating reply:",e)}})},500))}insertSuggestion(e,n){const t=e.querySelector('[role="textbox"]');if(t){t.innerText=n;const e=new Event("input",{bubbles:!0});t.dispatchEvent(e),t.focus()}}insertGeneratedReply(e,n){const t=e.querySelector('[role="textbox"]');if(t){const e=Object.getOwnPropertyDescriptor(window.HTMLTextAreaElement.prototype,"value")?.set;if(e){e.call(t,n);const i=new Event("input",{bubbles:!0});t.dispatchEvent(i),t.focus()}else{t.innerText=n;const e=new Event("input",{bubbles:!0});t.dispatchEvent(e),t.focus()}}}}let t=null,i={isAuthenticated:!1};chrome.runtime.onMessage.addListener((e,o,s)=>{"authStateChanged"===e.action&&(i=e.data,i.isAuthenticated&&!t?(t=new n,t.initialize()):!i.isAuthenticated&&t&&(t.cleanup(),t=null))});let o=location.href;new MutationObserver(()=>{const e=location.href;e!==o&&(o=e,t&&t.handleUrlChange())}).observe(document,{subtree:!0,childList:!0}),async function(){console.log("[ReplyGuy Content] Initializing on:",window.location.href);try{console.log("[ReplyGuy Content] Checking authentication...");const e=await chrome.runtime.sendMessage({action:"checkAuth"});console.log("[ReplyGuy Content] Auth response:",e),e.success&&(i=e.data,console.log("[ReplyGuy Content] Auth state:",i)),i.isAuthenticated?(console.log("[ReplyGuy Content] User authenticated, initializing Twitter integration"),t=new n,t.initialize()):(console.log("[ReplyGuy Content] User not authenticated"),t=new n,t.initialize())}catch(e){console.error("[ReplyGuy Content] Initialization error:",e)}}()})();